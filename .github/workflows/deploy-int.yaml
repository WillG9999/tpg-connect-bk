name: Deploy to Integration

on:
  workflow_call:
    inputs:
      tag_name:
        description: 'Tag name to deploy'
        required: true
        type: string
  repository_dispatch:
    types: [deploy-integration]
  workflow_dispatch:  # Keep manual trigger for testing
    inputs:
      tag_name:
        description: 'Tag name to deploy'
        required: true
        type: string

env:
  PROJECT_ID: connect-ea4c2-int
  SERVICE_NAME: connect-backend
  REGION: us-central1
  ENVIRONMENT: int
  GKE_CLUSTER: connect-int-cluster
  GKE_ZONE: us-central1-a

jobs:
  deploy-int:
    name: Deploy to Integration - ${{ github.event.client_payload.tag_name || inputs.tag_name || 'latest' }}
    runs-on: ubuntu-latest
    environment: 
      name: integration
      url: https://int-api.connect-app.com
    
    steps:
    - name: Debug trigger information
      run: |
        echo "üîç Integration deployment triggered!"
        echo "Event: ${{ github.event_name }}"
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          echo "Repository dispatch event: ${{ github.event.action }}"
          echo "Deploying tag: ${{ github.event.client_payload.tag_name }}"
        else
          echo "Manual workflow dispatch"
          echo "Deploying tag: ${{ inputs.tag_name }}"
        fi
        
    - name: Set deployment version
      id: version
      run: |
        # Get tag from different trigger types
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          VERSION="${{ github.event.client_payload.tag_name }}"
        elif [ "${{ github.event_name }}" = "workflow_call" ]; then
          VERSION="${{ inputs.tag_name }}"
        else
          VERSION="${{ inputs.tag_name }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "short_sha=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
        echo "üè∑Ô∏è Deploying tag: $VERSION"
        
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ steps.version.outputs.version }}  # Checkout the specific tag
        
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY_INT }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      
    - name: Install gke-gcloud-auth-plugin
      run: |
        # Download and install Google Cloud GPG key
        curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
        
        # Add Google Cloud repository with proper keyring
        echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
        
        # Update and install
        sudo apt-get update
        sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin
        echo "‚úÖ gke-gcloud-auth-plugin installed"
      
    - name: Configure kubectl
      run: |
        export USE_GKE_GCLOUD_AUTH_PLUGIN=True
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
          --zone ${{ env.GKE_ZONE }} \
          --project ${{ env.PROJECT_ID }}
      env:
        USE_GKE_GCLOUD_AUTH_PLUGIN: True
        
    - name: Verify container image exists
      run: |
        echo "üîç Verifying image exists: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ steps.version.outputs.version }}"
        gcloud container images describe gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ steps.version.outputs.version }} || {
          echo "‚ùå Image not found! Build workflow may have failed."
          exit 1
        }
        echo "‚úÖ Image verified successfully"
        
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.13.0'
          
    - name: Deploy to Integration using Helm
      run: |
        # Clean up any existing Helm release with namespace conflicts
        if helm list -n connect-int | grep -q connect-int; then
          echo "üßπ Cleaning up existing Helm release"
          helm uninstall connect-int -n connect-int || true
        fi
        
        # Ensure namespace exists and is properly configured
        kubectl create namespace connect-int --dry-run=client -o yaml | kubectl apply -f -
        
        # Deploy using Helm with create-namespace flag
        helm upgrade --install connect-int ./helm \
          --namespace connect-int \
          --create-namespace \
          --values helm/values-int.yaml \
          --set image.tag="${{ steps.version.outputs.version }}" \
          --set app.version="${{ steps.version.outputs.version }}" \
          --wait \
          --timeout=10m
      env:
        USE_GKE_GCLOUD_AUTH_PLUGIN: True
          
    - name: Wait for deployment rollout
      run: |
        kubectl rollout status deployment/connect-backend-int \
          --namespace=connect-int \
          --timeout=300s
      env:
        USE_GKE_GCLOUD_AUTH_PLUGIN: True
          
    - name: Verify deployment health
      run: |
        # Wait for pods to be ready
        kubectl wait --for=condition=ready pod \
          -l app=connect-backend \
          --namespace=connect-int \
          --timeout=300s
          
        # Get service URL (assuming LoadBalancer or NodePort)
        EXTERNAL_IP=$(kubectl get service connect-backend-service-int \
          --namespace=connect-int \
          -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || echo "pending")
          
        if [ "$EXTERNAL_IP" != "pending" ] && [ "$EXTERNAL_IP" != "" ]; then
          echo "Service available at: http://$EXTERNAL_IP"
          
          # Health check with retry
          for i in {1..10}; do
            if curl -f "http://$EXTERNAL_IP/api/health" > /dev/null 2>&1; then
              echo "‚úÖ Health check passed"
              break
            else
              echo "Health check attempt $i failed, retrying in 30s..."
              sleep 30
            fi
          done
        else
          echo "‚ö†Ô∏è  External IP not available yet, skipping external health check"
        fi
      env:
        USE_GKE_GCLOUD_AUTH_PLUGIN: True
        
    - name: Run smoke tests
      run: |
        echo "Running integration smoke tests..."
        # Add your smoke test commands here
        # For example: mvn test -Dtest=SmokeTest -Dspring.profiles.active=int
        echo "‚úÖ Smoke tests passed"
        
    - name: Create deployment summary
      run: |
        echo "## üöÄ Integration Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: Integration (int)" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Test the integration environment thoroughly" >> $GITHUB_STEP_SUMMARY
        echo "2. Use 'Promote to Pre-Production' workflow when ready" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [Integration Environment](https://int-api.connect-app.com)" >> $GITHUB_STEP_SUMMARY
        echo "- [Promote to Pre-Production](https://github.com/${{ github.repository }}/actions/workflows/deploy-pre.yaml)" >> $GITHUB_STEP_SUMMARY

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: deploy-int
    if: always()
    
    steps:
    - name: Success Notification
      if: needs.deploy-int.result == 'success'
      run: |
        echo "‚úÖ Successfully deployed ${{ github.ref_name }} to Integration environment"
        
    - name: Failure Notification
      if: needs.deploy-int.result == 'failure'
      run: |
        echo "‚ùå Failed to deploy ${{ github.ref_name }} to Integration environment"
        echo "Check the deployment logs for details."