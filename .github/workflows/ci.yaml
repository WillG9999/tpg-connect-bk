name: Build Images

on:
  workflow_call:
    inputs:
      tag_name:
        description: 'Tag name to build'
        required: true
        type: string
  repository_dispatch:
    types: [build-image]
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name to build'
        required: true
        type: string

env:
  JAVA_VERSION: '21'
  JAVA_DISTRIBUTION: 'temurin'

jobs:
  build:
    name: Build and Push Image
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Get build version
      id: version
      run: |
        # Get tag from different trigger types
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          VERSION="${{ github.event.client_payload.tag_name }}"
        elif [ "${{ github.event_name }}" = "workflow_call" ]; then
          VERSION="${{ inputs.tag_name }}"
        else
          VERSION="${{ inputs.tag_name }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "üè∑Ô∏è Building tag: $VERSION"
        
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ steps.version.outputs.version }}  # Checkout the specific tag
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY_INT }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker gcr.io
          
    - name: Build and push with Jib
      run: |
        echo "üî® Building image: gcr.io/connect-ea4c2-int/connect-backend:${{ steps.version.outputs.version }}"
        mvn clean compile jib:build \
          -Djib.to.image=gcr.io/connect-ea4c2-int/connect-backend:${{ steps.version.outputs.version }} \
          -Djib.to.tags=latest,${{ steps.version.outputs.version }} \
          -DGCP_PROJECT_ID=connect-ea4c2-int \
          -DskipTests=true
        echo "‚úÖ Image built and pushed successfully"
          
    - name: Trigger integration deployment
      run: |
        echo "üöÄ Triggering integration deployment for tag ${{ steps.version.outputs.version }}"
        
        # Make the API call and capture response
        RESPONSE=$(curl -s -w "%{http_code}" -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/dispatches \
          -d '{"event_type":"deploy-integration","client_payload":{"tag_name":"${{ steps.version.outputs.version }}"}}')
        
        # Extract HTTP status code and response body
        HTTP_CODE="${RESPONSE: -3}"
        BODY="${RESPONSE%???}"
        
        echo "HTTP Status Code: $HTTP_CODE"
        echo "Response Body: $BODY"
        
        # Check if the request was successful
        if [ "$HTTP_CODE" -eq 204 ] || [ "$HTTP_CODE" -eq 200 ]; then
          echo "‚úÖ Successfully triggered integration deployment"
        else
          echo "‚ùå Failed to trigger integration deployment"
          echo "HTTP Code: $HTTP_CODE"
          echo "Response: $BODY"
          exit 1
        fi