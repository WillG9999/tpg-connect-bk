name: Connect Backend CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: connect-ea4c2
  SERVICE_NAME: connect-backend
  REGION: us-central1

jobs:
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests
      run: mvn clean test
      
    - name: Run integration tests
      run: mvn verify -P integration-test
      
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: OWASP Dependency Check
      run: |
        mvn org.owasp:dependency-check-maven:check
        
    - name: Upload OWASP report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: owasp-report
        path: target/dependency-check-report.html

  build-and-push:
    name: Build & Push Container
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker gcr.io
      
    - name: Build and push with Jib
      env:
        GCP_PROJECT_ID: ${{ env.PROJECT_ID }}
      run: |
        mvn clean compile jib:build \
          -Dimage=gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
          -Dimage=gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: staging
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      
    - name: Deploy to Cloud Run (Staging)
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }}-staging \
          --image gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --memory 2Gi \
          --cpu 2 \
          --max-instances 10 \
          --set-env-vars="SPRING_PROFILES_ACTIVE=staging" \
          --set-secrets="JWT_SECRET=jwt-secret:latest,FIREBASE_CONFIG_PATH=firebase-config:latest,EMAIL_PASSWORD=email-password:latest"
          
    - name: Get staging URL
      run: |
        echo "Staging URL: $(gcloud run services describe ${{ env.SERVICE_NAME }}-staging --platform managed --region ${{ env.REGION }} --format 'value(status.url)')"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment: production
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      
    - name: Deploy to Cloud Run (Production)
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --memory 4Gi \
          --cpu 4 \
          --max-instances 100 \
          --set-env-vars="SPRING_PROFILES_ACTIVE=prod" \
          --set-secrets="JWT_SECRET=jwt-secret:latest,FIREBASE_CONFIG_PATH=firebase-config:latest,EMAIL_PASSWORD=email-password:latest,GCP_PROJECT_ID=gcp-project-id:latest,FIREBASE_PROJECT_ID=firebase-project-id:latest,FIREBASE_DATABASE_URL=firebase-database-url:latest,FIREBASE_STORAGE_BUCKET=firebase-storage-bucket:latest,GCP_STORAGE_BUCKET=gcp-storage-bucket:latest,GCP_CREDENTIALS_PATH=gcp-credentials-path:latest,EMAIL_FROM_EMAIL=email-from-email:latest,EMAIL_USERNAME=email-username:latest"
          
    - name: Get production URL
      run: |
        echo "Production URL: $(gcloud run services describe ${{ env.SERVICE_NAME }} --platform managed --region ${{ env.REGION }} --format 'value(status.url)')"
        
    - name: Run health check
      run: |
        PROD_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --platform managed --region ${{ env.REGION }} --format 'value(status.url)')
        sleep 30  # Wait for service to be ready
        curl -f "$PROD_URL/api/health" || exit 1
        curl -f "$PROD_URL/api/health/ready" || exit 1
        echo "Production deployment successful and healthy!"