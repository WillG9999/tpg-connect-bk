name: Promote to Pre-Production

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to promote from Integration (e.g., v1.0.0)'
        required: true
        type: string
      force_deploy:
        description: 'Force deployment even if health checks fail'
        required: false
        type: boolean
        default: false
      run_full_tests:
        description: 'Run full test suite before deployment'
        required: false
        type: boolean
        default: true

env:
  PROJECT_ID: connect-ea4c2
  SERVICE_NAME: connect-backend
  REGION: us-central1
  ENVIRONMENT: pre
  GKE_CLUSTER: connect-cluster
  GKE_ZONE: us-central1-a

jobs:
  validate-version:
    name: Validate Version in Integration
    runs-on: ubuntu-latest
    outputs:
      image-exists: ${{ steps.check.outputs.exists }}
      current-int-version: ${{ steps.check.outputs.current_version }}
    
    steps:
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      
    - name: Check if image exists and is deployed in integration
      id: check
      run: |
        # Check if the container image exists
        if gcloud container images describe gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ inputs.version }} > /dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "✅ Image gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ inputs.version }} exists"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "❌ Image gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ inputs.version }} not found"
          exit 1
        fi
        
        # Check current version in integration
        kubectl config set-context --current --namespace=connect-int
        CURRENT_VERSION=$(kubectl get deployment connect-backend-int -o jsonpath='{.metadata.labels.version}' || echo "unknown")
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current integration version: $CURRENT_VERSION"

  pre-deployment-tests:
    name: Pre-Deployment Tests
    runs-on: ubuntu-latest
    needs: validate-version
    if: inputs.run_full_tests == true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run full test suite
      run: |
        echo "Running comprehensive test suite before pre-production deployment..."
        mvn clean test verify -Dspring.profiles.active=test
        
    - name: Run security scan
      run: |
        mvn org.owasp:dependency-check-maven:check -DskipTests=true

  deploy-pre:
    name: Deploy to Pre-Production
    runs-on: ubuntu-latest
    needs: [validate-version, pre-deployment-tests]
    if: always() && needs.validate-version.outputs.image-exists == 'true' && (needs.pre-deployment-tests.result == 'success' || needs.pre-deployment-tests.result == 'skipped')
    environment: 
      name: pre-production
      url: https://pre-api.connect-app.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      
    - name: Configure kubectl
      run: |
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
          --zone ${{ env.GKE_ZONE }} \
          --project ${{ env.PROJECT_ID }}
        
    - name: Tag image for pre-production
      run: |
        # Tag the existing image for pre-production
        gcloud container images add-tag \
          gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ inputs.version }} \
          gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:pre-latest
          
    - name: Create backup of current pre-production deployment
      run: |
        # Get current image for potential rollback
        CURRENT_IMAGE=$(kubectl get deployment connect-backend-pre \
          -o jsonpath='{.spec.template.spec.containers[0].image}' \
          --namespace=connect-pre 2>/dev/null || echo "none")
          
        echo "Current pre-production image: $CURRENT_IMAGE"
        echo "BACKUP_IMAGE=$CURRENT_IMAGE" >> $GITHUB_ENV
        
    - name: Deploy to Pre-Production Kubernetes
      run: |
        # Update deployment image
        kubectl set image deployment/connect-backend-pre \
          connect-backend=gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ inputs.version }} \
          --namespace=connect-pre
          
        # Update labels and annotations
        kubectl annotate deployment connect-backend-pre \
          deployment.kubernetes.io/revision- \
          --namespace=connect-pre
          
        kubectl label deployment connect-backend-pre \
          version=${{ inputs.version }} \
          release=${{ inputs.version }} \
          environment=pre \
          promoted-from=int \
          promoted-at=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
          promoted-by=${{ github.actor }} \
          --overwrite \
          --namespace=connect-pre
          
    - name: Wait for deployment rollout
      run: |
        kubectl rollout status deployment/connect-backend-pre \
          --namespace=connect-pre \
          --timeout=600s
          
    - name: Verify deployment health
      id: health_check
      run: |
        # Wait for pods to be ready
        kubectl wait --for=condition=ready pod \
          -l app=connect-backend \
          --namespace=connect-pre \
          --timeout=300s
          
        # Extended health check
        echo "Running comprehensive health checks..."
        
        # Get service endpoint
        EXTERNAL_IP=$(kubectl get service connect-backend-service-pre \
          --namespace=connect-pre \
          -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || echo "pending")
          
        if [ "$EXTERNAL_IP" != "pending" ] && [ "$EXTERNAL_IP" != "" ]; then
          # Health endpoint check
          for i in {1..15}; do
            if curl -f "http://$EXTERNAL_IP/api/health" > /dev/null 2>&1; then
              echo "✅ Basic health check passed"
              break
            else
              echo "Health check attempt $i failed, retrying in 20s..."
              if [ $i -eq 15 ]; then
                echo "health_check_passed=false" >> $GITHUB_OUTPUT
                if [ "${{ inputs.force_deploy }}" != "true" ]; then
                  echo "❌ Health checks failed, will attempt rollback"
                  exit 1
                fi
              fi
              sleep 20
            fi
          done
          
          # Readiness check
          if curl -f "http://$EXTERNAL_IP/api/health/ready" > /dev/null 2>&1; then
            echo "✅ Readiness check passed"
            echo "health_check_passed=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️  Readiness check failed"
            echo "health_check_passed=false" >> $GITHUB_OUTPUT
            if [ "${{ inputs.force_deploy }}" != "true" ]; then
              exit 1
            fi
          fi
        else
          echo "⚠️  External IP not available, skipping external health checks"
          echo "health_check_passed=unknown" >> $GITHUB_OUTPUT
        fi
        
    - name: Run pre-production smoke tests
      run: |
        echo "Running pre-production smoke tests..."
        # Add your comprehensive smoke test commands here
        # These should test critical user journeys
        echo "✅ Pre-production smoke tests completed"
        
    - name: Rollback on failure
      if: failure() && env.BACKUP_IMAGE != 'none' && inputs.force_deploy != true
      run: |
        echo "❌ Deployment failed, rolling back to previous version..."
        kubectl set image deployment/connect-backend-pre \
          connect-backend=${{ env.BACKUP_IMAGE }} \
          --namespace=connect-pre
          
        kubectl rollout status deployment/connect-backend-pre \
          --namespace=connect-pre \
          --timeout=300s
          
        echo "✅ Rollback completed"
        
    - name: Create deployment summary
      if: success()
      run: |
        echo "## 🚀 Pre-Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: Pre-Production (pre)" >> $GITHUB_STEP_SUMMARY
        echo "- **Promoted from**: Integration (int)" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Promoted by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Health Check**: ${{ steps.health_check.outputs.health_check_passed }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Perform thorough testing in pre-production environment" >> $GITHUB_STEP_SUMMARY
        echo "2. Verify all integrations and user flows" >> $GITHUB_STEP_SUMMARY
        echo "3. Use 'Promote to Production' workflow when ready" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [Pre-Production Environment](https://pre-api.connect-app.com)" >> $GITHUB_STEP_SUMMARY
        echo "- [Promote to Production](https://github.com/${{ github.repository }}/actions/workflows/deploy-prod.yaml)" >> $GITHUB_STEP_SUMMARY

  notify:
    name: Notify Promotion Status
    runs-on: ubuntu-latest
    needs: deploy-pre
    if: always()
    
    steps:
    - name: Success Notification
      if: needs.deploy-pre.result == 'success'
      run: |
        echo "✅ Successfully promoted ${{ inputs.version }} to Pre-Production environment"
        
    - name: Failure Notification
      if: needs.deploy-pre.result == 'failure'
      run: |
        echo "❌ Failed to promote ${{ inputs.version }} to Pre-Production environment"
        echo "Check the deployment logs for details."