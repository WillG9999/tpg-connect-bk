name: Auto Release & Deploy

run-name: ${{ github.event.head_commit.message }} üöÄ

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

permissions:
  contents: write
  pull-requests: write
  issues: write

env:
  PROJECT_ID: connect-ea4c2
  SERVICE_NAME: connect-backend

jobs:
  check-release-trigger:
    name: Check if Release Should Be Created
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.check.outputs.should_release }}
      release-type: ${{ steps.check.outputs.release_type }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Need at least 2 commits to check the latest
        
    - name: Check commit message for release trigger
      id: check
      run: |
        # Get the latest commit message
        COMMIT_MSG=$(git log -1 --pretty=format:"%s")
        echo "üîç Debug: Latest commit: '$COMMIT_MSG'"
        echo "üîç Debug: Event name: ${{ github.event_name }}"
        echo "üîç Debug: Ref: ${{ github.ref }}"
        
        # Check for release triggers in commit message
        SHOULD_RELEASE=false
        RELEASE_TYPE="patch"
        
        # Check if commit message STARTS with "release:"
        if echo "$COMMIT_MSG" | grep -qi "^release:"; then
          SHOULD_RELEASE=true
          echo "üè∑Ô∏è Release trigger found at start of commit message"
          
          # Check for specific release types
          if echo "$COMMIT_MSG" | grep -qi "^release:.*major"; then
            RELEASE_TYPE="major"
          elif echo "$COMMIT_MSG" | grep -qi "^release:.*minor"; then
            RELEASE_TYPE="minor"
          else
            RELEASE_TYPE="patch"
          fi
        else
          echo "‚ùå No release trigger found in commit message"
        fi
        
        # If manual trigger, always release
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          SHOULD_RELEASE=true
          RELEASE_TYPE="${{ inputs.bump_type }}"
          echo "üéØ Manual workflow trigger detected"
        fi
        
        echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
        echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
        
        echo "üéØ Final Release decision:"
        echo "  Should release: $SHOULD_RELEASE"
        echo "  Release type: $RELEASE_TYPE"

  auto-release:
    name: Create ${{ needs.check-release-trigger.outputs.release-type }} Release
    runs-on: ubuntu-latest
    needs: check-release-trigger
    if: needs.check-release-trigger.outputs.should-release == 'true'
    outputs:
      new-version: ${{ steps.version.outputs.new_version }}
      release-created: ${{ steps.release.outputs.created }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
    - name: Calculate next version
      id: version
      run: |
        # Ensure we have all tags available
        git fetch --tags
        echo "üîç Debug: All tags available:"
        git tag -l | sort -V
        
        # Check for existing 1.x.x tags (ignore old 0.x.x tags)
        LATEST_1X_TAG=$(git tag -l "1.*.*" | sort -V | tail -n1)
        echo "üîç Debug: Latest 1.x.x tag: '$LATEST_1X_TAG'"
        
        # Also check what git describe finds
        LATEST_ANY_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")
        echo "üîç Debug: Latest any tag: '$LATEST_ANY_TAG'"
        
        if [ -z "$LATEST_1X_TAG" ]; then
          # No 1.x.x tags exist, start with 1.0.0
          NEW_VERSION="1.0.0"
          echo "üéâ First 1.x.x release - starting with version 1.0.0"
        else
          # Get current version from last 1.x.x tag
          CURRENT_VERSION="$LATEST_1X_TAG"
          echo "Current version: $CURRENT_VERSION"
          
          # Split version into parts
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Get bump type from the release trigger check
          BUMP_TYPE="${{ needs.check-release-trigger.outputs.release-type }}"
          
          echo "Using bump type: $BUMP_TYPE"
          
          # Calculate new version
          case $BUMP_TYPE in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            *)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
        fi
        
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "üè∑Ô∏è New version: $NEW_VERSION"
        
    - name: Generate changelog
      id: changelog
      run: |
        # Get last tag for changelog generation
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -n "$LAST_TAG" ]; then
          echo "Generating changelog since $LAST_TAG"
          
          # Get all commits since last tag
          COMMITS=$(git log --pretty=format:"- %s (%h)" ${LAST_TAG}..HEAD 2>/dev/null || echo "")
          
          if [ -n "$COMMITS" ]; then
            cat > CHANGELOG.md << 'EOF'
        ## üìã Changes in this Release
        
        EOF
            echo "$COMMITS" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          else
            echo "## üîÑ Automated Release" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "This is an automated release with incremental version bump." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi
        else
          echo "## üéâ Initial Release" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "This is the first release of the Connect Dating App backend." >> CHANGELOG.md
          echo "" >> CHANGELOG.md
        fi
        
        # Add deployment information
        cat >> CHANGELOG.md << 'EOF'
        ## üöÄ Deployment
        
        This release will be automatically deployed to:
        1. **Integration Environment** - Automatic deployment upon release creation
        2. **Pre-Production** - Manual promotion available via GitHub Actions
        3. **Production** - Manual promotion with approval required
        
        ### Quick Links
        - [Integration Environment](https://int-api.connect-app.com)
        - [Promote to Pre-Production](https://github.com/${{ github.repository }}/actions/workflows/deploy-pre.yaml)
        - [Promote to Production](https://github.com/${{ github.repository }}/actions/workflows/deploy-prod.yaml)
        
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/${LAST_TAG}...${{ steps.version.outputs.new_version }}
        EOF
        
        echo "Generated changelog:"
        cat CHANGELOG.md
        
    - name: Create Git tag and release
      id: release
      run: |
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        
        # Create and push tag
        git tag -a "$NEW_VERSION" -m "Automated release $NEW_VERSION"
        git push origin "$NEW_VERSION"
        
        echo "created=true" >> $GITHUB_OUTPUT
        echo "‚úÖ Created and pushed tag: $NEW_VERSION"
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.new_version }}
        name: Release ${{ steps.version.outputs.new_version }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false
        
    - name: Create release summary
      run: |
        echo "## üéâ Automated Release Created" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ steps.version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: Push to main branch" >> $GITHUB_STEP_SUMMARY
        echo "- **Next**: Auto-deploy to Integration environment" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üöÄ Deployment Pipeline" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ **Release Created**: ${{ steps.version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- üîÑ **Integration**: Deployment triggered automatically" >> $GITHUB_STEP_SUMMARY
        echo "- ‚è≥ **Pre-Production**: Manual promotion available" >> $GITHUB_STEP_SUMMARY
        echo "- ‚è≥ **Production**: Manual promotion with approval" >> $GITHUB_STEP_SUMMARY

  call-build-workflow:
    name: Build and Deploy
    needs: auto-release
    if: needs.auto-release.outputs.release-created == 'true'
    uses: ./.github/workflows/ci.yaml
    with:
      tag_name: ${{ needs.auto-release.outputs.new-version }}
    secrets: inherit

  no-release:
    name: No Release Triggered
    runs-on: ubuntu-latest
    needs: check-release-trigger
    if: needs.check-release-trigger.outputs.should-release == 'false'
    
    steps:
    - name: No release notification
      run: |
        echo "## ‚ÑπÔ∏è No Release Created" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Reason**: No release trigger found in commit message" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üè∑Ô∏è To create a release, START your commit message with:" >> $GITHUB_STEP_SUMMARY
        echo "- \`release:\` - Creates a patch release (v1.0.0 ‚Üí v1.0.1)" >> $GITHUB_STEP_SUMMARY
        echo "- \`release: minor\` - Creates a minor release (v1.0.0 ‚Üí v1.1.0)" >> $GITHUB_STEP_SUMMARY
        echo "- \`release: major\` - Creates a major release (v1.0.0 ‚Üí v2.0.0)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìù Example commit messages:" >> $GITHUB_STEP_SUMMARY
        echo "- \`release: add user authentication feature\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`release: minor add messaging system\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`release: major breaking API changes\`" >> $GITHUB_STEP_SUMMARY