# Connect Dating Application - Production Environment Configuration
# Production-ready configuration with all security and features enabled

spring:
  config:
    activate:
      on-profile: prod
  cloud:
    gcp:
      secretmanager:
        enabled: true
        project-id: connect-ea4c2

# Feature Flags - Production Environment (All features enabled)
app:
  features:
    email-verification: true       # REQUIRED: Users must verify email before login
    email-service: true           # Enable email service for user communications
    push-notifications: true      # Enable push notifications for engagement
    premium-features: true        # Enable subscription and premium features
    admin-features: true          # Enable admin functionality
    realtime-messaging: true      # Enable real-time messaging features
    analytics: true               # Enable user analytics and tracking
    file-uploads: true            # Enable photo and file upload functionality
    social-sharing: true          # Enable social sharing features
    safety-features: true         # REQUIRED: Enable all safety and reporting features
  
  # Development Settings - Production security
  dev:
    expose-reset-tokens: false    # NEVER expose reset tokens in production

# Email Configuration - Production Gmail settings
email:
  enabled: true
  provider: smtp
  from-email: ${sm://email-from-email}
  from-name: Connect Dating App
  
  # Gmail SMTP Settings
  smtp-host: smtp.gmail.com
  smtp-port: 587
  username: ${sm://email-username}
  password: ${sm://email-password}
  authentication-enabled: true
  start-tls-enabled: true
  ssl-enabled: false
  
  # Email Settings - Production timeouts
  connection-timeout: 30000
  read-timeout: 30000
  max-retries: 3
  debug-enabled: false

# Logging Configuration - Production logging with structured output
logging:
  level:
    root: WARN
    com.tpg.connect: INFO
    org.springframework: WARN
    org.springframework.web: INFO  # For request logging
    org.springframework.security: WARN
    com.google.cloud: WARN
    com.google.firebase: WARN
  pattern:
    # Structured JSON logging for container environments
    console: '{"timestamp":"%d{yyyy-MM-dd HH:mm:ss.SSS}","level":"%level","thread":"%thread","logger":"%logger{36}","message":"%msg","mdc":"%X"}%n'
    # Fallback file pattern for debugging
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: /var/log/connect/application.log
    max-size: 100MB
    max-history: 30
    total-size-cap: 1GB

# Firebase Configuration - Production database
firebase:
  config:
    path: ${sm://firebase-config-path}
  database:
    url: ${sm://firebase-database-url}
  storage:
    bucket: ${sm://firebase-storage-bucket}
  project:
    id: ${sm://firebase-project-id}

# Google Cloud Storage - Production
gcp:
  project:
    id: ${sm://gcp-project-id}
  storage:
    bucket: ${sm://gcp-storage-bucket}
    credentials:
      location: ${sm://gcp-credentials-path}

# Production Security Settings
server:
  port: ${SERVER_PORT:8080}
  servlet:
    session:
      timeout: 30m
  compression:
    enabled: true
  http2:
    enabled: true

# Production JWT Settings
jwt:
  secret: ${sm://jwt-secret}

# Production Database Connection Pool Settings (if using SQL database)
# spring:
#   datasource:
#     hikari:
#       maximum-pool-size: 20
#       minimum-idle: 5
#       idle-timeout: 600000
#       max-lifetime: 1800000